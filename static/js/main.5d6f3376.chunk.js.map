{"version":3,"sources":["components/pages/sections/helpers/RecipeHelpers.js","components/pages/sections/helpers/UIHelpers.js","components/pages/sections/InformationSection.js","components/pages/sections/SankeySection.js","components/pages/sections/DisplayRFtTime.js","components/pages/sections/Recipe.js","components/pages/sections/AddRecipe.js","components/pages/sections/TableSection.js","components/pages/DashboardPage.js","components/Routes.js","components/topNavigation.js","components/Footer.js","App.js","registerServiceWorker.js","index.js"],"names":["tierNames","data","voltages","colors","Overclock","EUt","tierName","duration","tier","indexOf","resultEUt","resultDuration","multiplier","eut","ticks","Math","ceil","GenerateSankeyData","recipes","sankeyData","push","type","orientation","valueformat","valuesuffix","domain","x","y","node","pad","thickness","line","color","width","label","link","colorscales","colorscale","labels","arguments","length","undefined","forEach","recipe","inputs","input","name","outputs","output","GetLabels","Object","assign","links","source","target","value","unit","quantity","targetMachines","step","machine","hex","opacity","replace","r","parseInt","substring","g","b","HexToRGB","floor","random","GetLinks","GenerateRecipeGraph","targets","directedGraph","DirectedGraph","addNode","Number","machineName","machines","time","overclock","timeoc","visited","graph","sourceNode","edgeGraph","forEachNode","sourceAttributes","targetAttributes","addDirectedEdge","inputName","inputQuantity","inputTime","outputName","outputQuantity","outputTime","CalculateEdges","acyclicGraph","adjList","edges","forEachEdge","edge","attributes","values","FindAdjList","cycles","findCircuits","tmpGraph","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","cycle","dropEdge","err","return","FixGraph","RemoveCycles","reverse","item","DepthFirstTraversal","getNodeAttributes","forEachOutNeighbor","targetNode","getEdgeAttributes","inBPS","outBPS","inDegree","currentTarget","getNodeAttribute","setNodeAttribute","ParseItems","raw","endsWith","newRaw","slice","list","split","items","index","toLowerCase","trim","OutputRecipes","CalculateRatio","BuildOptions","options","nodeAttributes","inNeighbors","newOption","InformationSection","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTabs","tab","e","state","active","setState","_this2","react_default","a","createElement","Fragment","mdbreact_esm","className","to","onClick","roll","activeItem","tabId","role","react_select_es","defaultInputValue","props","onChange","handleSettingChange","map","opt","min","disabled","id","bps","Component","SankeySection","react_plotly_default","layout","autosize","title","config","displayModeBar","responsive","useResizeHandler","style","position","DisplayRFtTime","overclocked","displayRFt","rft","displayTime","displayEfficiency","efficiency","rftoc","efficiencyoc","key","toFixed","Recipe","onChangeTier","sections_DisplayRFtTime","n","o","tag","size","onSwapUp","onSwapDown","onDelete","AddRecipe","handleInputChange","_this$setState","nextValue","defineProperty","handleSelectChange","selectValue","handleDataValidation","isValid","rawRecipe","property","keys","inputList","outputList","rawInput","rawOutput","isNaN","error","newRecipe","toConsumableArray","onAdd","errorAlert","errorText","getValue","TableSection","hover","striped","headers","header","sections_Recipe","handleDelete","handleTiers","handleOverclock","handleSwapUp","handleSwapDown","sections_AddRecipe","handleAdd","DashboardPage","recipeStep","filter","_loop","ratio","disable","recipeId","status","results","console","log","currentItem","nextItem","nextStep","update","Headers","exampleRecipes","Recipes","sections_InformationSection","sections_TableSection","handleMachineSetting","sections_SankeySection","Routes","react_router","path","exact","component","React","TopNavigation","collapse","toggle","dropdownOpen","light","expand","scrolling","href","isOpen","navbar","left","right","rel","fab","icon","Footer","Date","getFullYear","App","topNavigation","components_Routes","components_Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","react_router_dom","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5d6f3376.chunk.js","sourcesContent":["import { DirectedGraph } from 'graphology';\r\nimport reverse from 'graphology-operators/reverse';\r\nimport findCircuits from 'elementary-circuits-directed-graph';\r\nimport * as data from '../data';\r\nlet tierNames = data.TierNames;\r\nlet voltages = data.Voltages;\r\nlet colors = data.Colors;\r\n\r\n/**\r\n * Adapted from GregTech Community Edition calculateOverclock function.\r\n * https://github.com/GregTechCE/GregTech/blob/master/src/main/java/gregtech/api/capability/impl/AbstractRecipeLogic.java\r\n * Returns object containing { rft: number, time: number }\r\n * \r\n * @export\r\n * @param {Number} EUt - EU per tick\r\n * @param {String} tierName - GregTech machine tier\r\n * @param {Number} duration - Recipe duration in ticks\r\n * @returns \r\n */\r\nexport function Overclock(EUt, tierName, duration) {\r\n    let tier = tierNames.indexOf(tierName) - 1;\r\n    let resultEUt = EUt;\r\n    let resultDuration = duration;\r\n    let multiplier = 0;\r\n\r\n    if (voltages[tier] <= EUt || tier === 0 || tier === -1) {\r\n        return {\r\n            eut: resultEUt,\r\n            ticks: resultDuration\r\n        }\r\n    };\r\n\r\n    if (EUt <= 16) {\r\n        if (EUt <= 8) {\r\n            multiplier = tier;\r\n        } else {\r\n            multiplier = tier - 1;\r\n        };\r\n\r\n        resultEUt = EUt * (1 << multiplier) * (1 << multiplier);\r\n        resultDuration = duration / (1 << multiplier);\r\n\r\n        return {\r\n            eut: resultEUt,\r\n            ticks: resultDuration\r\n        }\r\n    } else {\r\n        while (resultDuration >= 3 && resultEUt <= voltages[tier - 1]) {\r\n            resultEUt = resultEUt * 4;\r\n            resultDuration = resultDuration / 2.8;\r\n        }\r\n    };\r\n    \r\n    return {\r\n        eut: resultEUt,\r\n        ticks: Math.ceil(resultDuration)\r\n    };\r\n}\r\n\r\n/**\r\n * Sankey diagram data for React-Plotly.js Sankey diagrams.\r\n *\r\n * @export\r\n * @param {Object} recipes - Input object containing recipes\r\n * @returns \r\n */\r\nexport function GenerateSankeyData(recipes) {\r\n    let sankeyData = {};\r\n    sankeyData.data = [];\r\n    sankeyData.data.push({\r\n        type: \"sankey\",\r\n        orientation: \"h\",\r\n        valueformat: \".3f\",\r\n        valuesuffix: \" Blocks\",\r\n        domain: {\r\n            \"x\": [\r\n                0,\r\n                1\r\n            ],\r\n            \"y\": [\r\n                0,\r\n                1\r\n            ]\r\n        },\r\n        node: {\r\n            pad: 15,\r\n            thickness: 15,\r\n            line: {\r\n                color: \"black\",\r\n                width: 0.5\r\n            },\r\n            label: []\r\n        },\r\n        link: {\r\n            colorscales: [{\r\n                colorscale: \"Rainbow\"\r\n            }]\r\n        }\r\n    });\r\n\r\n    let labels = GetLabels(recipes);\r\n    sankeyData.data[0].node.label = labels;\r\n    sankeyData.data[0].link = Object.assign(sankeyData.data[0].link, GetLinks(recipes, labels));\r\n\r\n    return sankeyData;\r\n}\r\n\r\n/**\r\n * Returns a list of item labels. Valid types are \"both\", \"inputs\" and \"outputs\".\r\n * By default, the type is both.\r\n *\r\n * @export\r\n * @param {*} type\r\n * @param {*} recipes - Input object containing recipes\r\n * @returns\r\n */\r\nexport function GetLabels(recipes, type = \"both\") {\r\n    let labels = [];\r\n\r\n    recipes.forEach(recipe => {\r\n        if (type === \"both\" || type === \"inputs\") {\r\n            recipe.inputs.forEach(input => {\r\n                if (labels.indexOf(input.name) === -1) {\r\n                    labels.push(input.name);\r\n                }\r\n            })\r\n        }\r\n\r\n        if (type === \"both\" || type === \"outputs\") {\r\n            recipe.outputs.forEach(output => {\r\n                if (labels.indexOf(output.name) === -1) {\r\n                    labels.push(output.name);\r\n                }\r\n            })\r\n        }\r\n    })\r\n\r\n    return labels;\r\n}\r\n\r\n/**\r\n *An object containing React-Plotly.js Sankey diagram links\r\n *\r\n * @param {*} recipes - Input object containing recipes\r\n * @param {*} labels - Input array containing item labels\r\n * @returns\r\n */\r\nfunction GetLinks(recipes, labels) {\r\n    let links = {\r\n        source: [],\r\n        target: [],\r\n        value: [],\r\n        label: [],\r\n        color: []\r\n    };\r\n\r\n    recipes.forEach(recipe => {\r\n        recipe.inputs.forEach(input => {\r\n            recipe.outputs.forEach(output => {\r\n                links.source.push(labels.indexOf(input.name));\r\n                links.target.push(labels.indexOf(output.name));\r\n                (output.unit === 'b') ? links.value.push(output.quantity * recipe.targetMachines) : links.value.push(output.quantity * recipe.targetMachines / 1000);\r\n                links.label.push(recipe.step + \": \" + recipe.machine + \" (\" + recipe.tier + \")\");\r\n                links.color.push(HexToRGB(colors[Math.floor(Math.random() * colors.length)], 50));\r\n            })\r\n        })\r\n    })\r\n\r\n    return links;\r\n}\r\n\r\n/**\r\n *Returns an RGBA color value\r\n *\r\n * @param {String} hex - Input hex color string\r\n * @param {Number} opacity - Input opacity value between 0 and 100\r\n * @returns {String}\r\n */\r\nfunction HexToRGB(hex, opacity) {\r\n    hex = hex.replace('#', '');\r\n    let r = parseInt(hex.substring(0, 2), 16);\r\n    let g = parseInt(hex.substring(2, 4), 16);\r\n    let b = parseInt(hex.substring(4, 6), 16);\r\n\r\n    let result = 'rgba(' + r + ',' + g + ',' + b + ',' + opacity / 100 + ')';\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n *A directed graph for recipe calculations.\r\n *\r\n * @export\r\n * @param {*} recipes - Input object containing recipes\r\n * @returns\r\n */\r\nexport function GenerateRecipeGraph(recipes, targets) {\r\n    let directedGraph = new DirectedGraph();\r\n\r\n    recipes.forEach(recipe => {\r\n        directedGraph.addNode(Number(recipe.step), {\r\n            machineName: recipe.machine,\r\n            targetMachines: targets ? targets.machines : 1,\r\n            time: recipe.overclock === 'true' ? recipe.timeoc : recipe.time,\r\n            inputs: recipe.inputs,\r\n            outputs: recipe.outputs,\r\n            visited: false\r\n        });\r\n    })\r\n\r\n    let edgeGraph = CalculateEdges(directedGraph);\r\n    let reversedGraph = reverse(edgeGraph);\r\n    let acyclicGraph = RemoveCycles(reversedGraph);\r\n\r\n    if (targets) return CalculateGraph(acyclicGraph, targets.item.step);\r\n\r\n    return acyclicGraph;\r\n}\r\n\r\nfunction CalculateGraph(graph, sourceNode) {\r\n    return DepthFirstTraversal(graph, sourceNode);\r\n}\r\n\r\n// TODO: Optimize edge calculation\r\nfunction CalculateEdges(graph) {\r\n    let edgeGraph = graph;\r\n\r\n    edgeGraph.forEachNode((source, sourceAttributes) => {\r\n        sourceAttributes.outputs.forEach(output => {\r\n            edgeGraph.forEachNode((target, targetAttributes) => {\r\n                if (source !== target) {\r\n                    targetAttributes.inputs.forEach(input => {\r\n                        if (input.name === output.name) {\r\n                            edgeGraph.addDirectedEdge(source, target, {\r\n                                inputName: input.name,\r\n                                inputQuantity: input.quantity,\r\n                                inputTime: targetAttributes.time,\r\n                                outputName: output.name,\r\n                                outputQuantity: output.quantity,\r\n                                outputTime: sourceAttributes.time\r\n                            });\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    })\r\n\r\n    return edgeGraph;\r\n}\r\n\r\nfunction DepthFirstTraversal(graph, sourceNode) {\r\n    let sourceAttributes = graph.getNodeAttributes(sourceNode);\r\n\r\n    graph.forEachOutNeighbor(sourceNode, function (targetNode, targetAttributes) {\r\n        let edge = graph.getEdgeAttributes(sourceNode, targetNode);\r\n        let inBPS = (edge.inputQuantity / edge.inputTime) * sourceAttributes.targetMachines;\r\n        let outBPS = edge.outputQuantity / edge.outputTime;\r\n        let targetMachines = inBPS / outBPS;\r\n\r\n        if (targetAttributes.visited && graph.inDegree(targetNode) > 1) {\r\n            let currentTarget = graph.getNodeAttribute(targetNode, \"targetMachines\", targetMachines);\r\n            graph.setNodeAttribute(targetNode, \"targetMachines\", currentTarget + targetMachines);\r\n        } else {\r\n            graph.setNodeAttribute(targetNode, \"targetMachines\", targetMachines);\r\n            graph.setNodeAttribute(targetNode, \"visited\", true);\r\n        }\r\n\r\n        return DepthFirstTraversal(graph, targetNode);\r\n    })\r\n\r\n    return graph;\r\n}\r\n\r\nfunction RemoveCycles(graph) {\r\n    let adjList = FindAdjList(graph);\r\n    let cycles = findCircuits(adjList);\r\n    \r\n    if (cycles) {\r\n        let acyclicGraph = FixGraph(graph, cycles);\r\n        return acyclicGraph;\r\n    } else {\r\n        return graph;\r\n    }\r\n}\r\n\r\nfunction FindAdjList(graph) {\r\n    let edges = [];\r\n\r\n    graph.forEachNode(node => {\r\n        edges[node] = [];\r\n    })\r\n\r\n    graph.forEachEdge(\r\n        (edge, attributes, source, target, sourceAttributes, targetAttributes) => {\r\n            edges[source].push(Number(target));\r\n        });\r\n    let adjList = Object.values(edges);\r\n\r\n    return adjList;\r\n}\r\n\r\nfunction FixGraph(graph, cycles) {\r\n    let tmpGraph = graph;\r\n\r\n    for (let cycle of cycles) {\r\n        let source = cycle[0];\r\n        let target = cycle[1];\r\n\r\n        tmpGraph.dropEdge((tmpGraph.edge(source, target)));\r\n    }\r\n\r\n    return graph;\r\n}","import { GenerateRecipeGraph } from './RecipeHelpers';\r\n/**\r\n *A Parsing function that converts a string into\r\n *an item object array\r\n * \r\n * @export\r\n * @param {String} raw - Input string to parse.\r\n * @return {array} - the parse items object array\r\n */\r\nexport function ParseItems(raw) {\r\n    if (raw.endsWith(';')) {\r\n        let newRaw = raw.slice(0, -1);\r\n        raw = newRaw;\r\n    }\r\n\r\n    let list = raw.split(';');\r\n    let items = [];\r\n    for (let index in list) {\r\n        let item = list[index].split(',');\r\n        item[1].toLowerCase();\r\n        items.push(\r\n            {\r\n                quantity: item[0].trim(),\r\n                unit: item[1].trim(),\r\n                name: item[2].trim()\r\n            }\r\n        )\r\n    };\r\n    return items;\r\n}\r\n\r\nexport function OutputRecipes(graph, recipes) {\r\n    recipes.forEach((recipe, node) => {\r\n        recipe.targetMachines = graph.getNodeAttribute(node, \"targetMachines\");\r\n    })\r\n\r\n    return recipes;\r\n}\r\n\r\nexport function CalculateRatio(recipes) {\r\n    //Calculates the items Units/second ratio and adds it to outputs.\r\n    recipes.forEach(recipe => {\r\n        let step = recipe.step;\r\n        let time = recipe.time;\r\n\r\n        recipe.outputs.forEach(output => {\r\n            output[\"ratio\"] = output.quantity / time;\r\n            output[\"step\"] = step;\r\n        });\r\n    });\r\n\r\n    return recipes;\r\n}\r\n\r\nexport function BuildOptions(recipes) {\r\n    //label: {item} + ' - #' + {step}, value={outputObj}\r\n    let options = [];\r\n    let graph = GenerateRecipeGraph(recipes);\r\n\r\n    graph.forEachNode((node, nodeAttributes) => {\r\n        if (graph.inNeighbors(node).length === 0) {\r\n            nodeAttributes.outputs.forEach(output => {\r\n                let newOption = {\r\n                    label: output.name + ' - #' + node,\r\n                    value: output\r\n                }\r\n                options.push(newOption);\r\n            })\r\n        }\r\n    })\r\n\r\n    return options;\r\n}","import React, { Component } from 'react';\r\nimport { MDBCard, MDBCardTitle, MDBRow, MDBCol, MDBInput, MDBNavItem, MDBNav, MDBNavLink, MDBTabContent, MDBTabPane } from 'mdbreact';\r\nimport Select from 'react-select';\r\n\r\nclass InformationSection extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            active: \"1\",\r\n        };\r\n    }\r\n\r\n    handleTabs = tab => e => {\r\n        if (this.state.active !== tab) {\r\n            this.setState({ active: tab });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <MDBRow>\r\n                    <MDBCol>\r\n                        <MDBCard className=\"white m-sm-1 p-1\">\r\n                            <MDBNav className=\"nav-tab m-sm-1\">\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink to=\"#\" active={this.state.active === \"1\"} onClick={this.handleTabs(\"1\")} roll=\"tab\">\r\n                                        EU/t\r\n                                    </MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink to=\"#\" active={this.state.active === \"2\"} onClick={this.handleTabs(\"2\")} roll=\"tab\">\r\n                                        Recycled Items\r\n                                    </MDBNavLink>\r\n                                </MDBNavItem>\r\n                                <MDBNavItem>\r\n                                    <MDBNavLink to=\"#\" active={this.state.active === \"3\"} onClick={this.handleTabs(\"3\")} roll=\"tab\">\r\n                                        Adding Recipes\r\n                                    </MDBNavLink>\r\n                                </MDBNavItem>\r\n                            </MDBNav>\r\n                            <MDBTabContent activeItem={this.state.active} className=\"pl-2\">\r\n                                <MDBTabPane tabId=\"1\" role=\"tabpanel\">\r\n                                    <p className=\"mt-2\">GregTech machines should have their EU/t values converted to RF/t. The equivalent RF/t value is <code>4 * EUt</code>.\r\n                                    <br />Efficiency % is the energy efficiency of the overclock.</p>\r\n                                </MDBTabPane>\r\n                                <MDBTabPane tabId=\"2\" role=\"tabpanel\">\r\n                                    <p className=\"mt-2\">The production chain is not calculated with any recycled items in mind.\r\n                                    The resultant production chain visual is not updated to show that the items are ignored.</p>\r\n                                </MDBTabPane>\r\n                                <MDBTabPane tabId=\"3\" role=\"tabpanel\" >\r\n                                    <p className=\"mt-2\">Item input/output format is [Quantity],[Unit],[item]; ...ext.\r\n                                    <br /> -> Quantity is the number of units needed per operation\r\n                                    <br /> -> Unit must be either b for block, or mb for millibuckets\r\n                                    <br /> -> item is the name of the item.  This is case sensitive!\r\n                                    <br /> Example: <code className=\"blue-text\">1000, mb, Lava; 1000, mb, Water;</code></p>\r\n                                </MDBTabPane>\r\n                            </MDBTabContent>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                    <MDBCol>\r\n                        <MDBCard className=\"card-body\">\r\n                            <MDBCardTitle className=\"text-center\">Settings</MDBCardTitle>\r\n                            <form>\r\n                                <Select\r\n                                    defaultInputValue={this.props.outputs.length !== 0 ? this.props.outputs[0].label : \"No valid outputs.\" }\r\n                                    onChange={(e) => this.props.handleSettingChange(e.value)}\r\n                                    options={this.props.outputs.map(opt => ({label: opt.label, value: opt.value}))}\r\n                                />\r\n                                <MDBInput\r\n                                    type=\"number\"\r\n                                    step=\"0.1\"\r\n                                    min=\"0.0\"\r\n                                    className=\"form-control-sm\"\r\n                                    disabled={false}\r\n                                    id=\"targetItemOutputs\"\r\n                                    label=\"Target Items per Second\"\r\n                                    value={this.props.targets.bps}\r\n                                    onChange={(e) => this.props.handleSettingChange(e.target.value, \"item\")}\r\n                                />\r\n                                <MDBInput\r\n                                    type=\"number\"\r\n                                    step=\"1\"\r\n                                    min=\"0.00\"\r\n                                    className=\"form-control-sm\"\r\n                                    disabled={false}\r\n                                    id=\"targetMachines\"\r\n                                    label=\"Target Machines\"\r\n                                    value={this.props.targets.machines}\r\n                                    onChange={(e) => this.props.handleSettingChange(e.target.value, \"machine\")}\r\n                                />\r\n                            </form>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InformationSection;\r\n\r\n","import React, { Component } from 'react';\r\nimport { MDBRow, MDBCol, MDBCard, MDBCardBody } from 'mdbreact';\r\nimport { GenerateSankeyData } from './helpers/RecipeHelpers';\r\nimport Plot from 'react-plotly.js';\r\n\r\nclass SankeySection extends Component {\r\n    render() {\r\n        let sankeyData = GenerateSankeyData(this.props.recipes);\r\n        return (\r\n            <MDBRow>\r\n                <MDBCol>\r\n                    <MDBCard>\r\n                        <MDBCardBody className=\"min-height\">\r\n                            <Plot\r\n                                data={sankeyData.data}\r\n                                layout={{ autosize: true, title: \"Production Chain Visual\" }}\r\n                                config={{ displayModeBar: false, responsive: true }}\r\n                                useResizeHandler={true}\r\n                                className=\"plot\"\r\n                                style={{position:'center'}}\r\n                            />\r\n                        </MDBCardBody>\r\n                    </MDBCard>\r\n                </MDBCol>\r\n            </MDBRow>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SankeySection;","import React, { Component } from 'react';\r\n\r\nclass DisplayRFtTime extends Component {\r\n    render() {\r\n        let overclocked = this.props.overclock;\r\n        let displayRFt = this.props.rft;\r\n        let displayTime = this.props.time;\r\n        let displayEfficiency = this.props.efficiency;\r\n\r\n        if (overclocked === 'true') {\r\n            displayRFt = this.props.rftoc;\r\n            displayTime = this.props.timeoc;\r\n            displayEfficiency = this.props.efficiencyoc;\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <th key={\"rft\" + this.props.step}>{displayRFt}</th>\r\n                <th key={\"time\" + this.props.step}>{Number(displayTime).toFixed(2)}</th>\r\n                <th key={\"efficiency\" + this.props.step}>{Number(displayEfficiency).toFixed(2)}</th>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DisplayRFtTime;","import { MDBBadge } from 'mdbreact';\r\nimport React, { Component } from 'react';\r\nimport * as data from \"./data\";\r\nimport DisplayRFtTime from './DisplayRFtTime';\r\nconst tierNames = data.TierNames;\r\n\r\nclass Recipe extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <tr>\r\n                    <th key={\"step\" + this.props.step}>{this.props.step}</th>\r\n                    <th key={\"machine\" + this.props.step}>{this.props.machine}</th>\r\n                    <th key={\"tier\" + this.props.step}>\r\n                        <select className=\"browser-default custom-select\" value={this.props.tier}\r\n                            onChange={(e) => this.props.onChangeTier(this.props.step, e.target.value)}>\r\n                            {tierNames.map((tier) =>\r\n                                <option key={\"tier\" + tier + this.props.step} value={tier}>{tier}</option>)}\r\n                        </select>\r\n                    </th>\r\n                    <th key={\"overclock\" + this.props.step}>\r\n                        <select className=\"browser-default custom-select\" value={this.props.overclock}\r\n                            onChange={(e) => this.props.onChange(this.props.step, e.target.value)}>\r\n                            <option value=\"true\">True</option>\r\n                            <option value=\"false\">False</option>\r\n                        </select>\r\n                    </th>\r\n\r\n                    <DisplayRFtTime\r\n                        key={\"display\" + this.props.step}\r\n                        rft={this.props.rft}\r\n                        rftoc={this.props.rftoc}\r\n                        time={this.props.time}\r\n                        timeoc={this.props.timeoc}\r\n                        efficiency={this.props.efficiency}\r\n                        efficiencyoc={this.props.efficiencyoc}\r\n                        overclock={this.props.overclock}\r\n                    />\r\n\r\n                    <th key={\"inputs\" + this.props.step}>\r\n                        {\r\n                            this.props.inputs.map((n, index) => {\r\n                                return (\r\n                                    <div key={index}>\r\n                                        <b>{n.quantity + n.unit}</b>\r\n                                        {\" \" + n.name}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </th>\r\n                    <th key={\"outputs\" + this.props.step}>\r\n                        {\r\n                            this.props.outputs.map((o, index) => {\r\n                                return (\r\n                                    <div key={index}>\r\n                                        <b>{o.quantity + o.unit}</b>\r\n                                        {\" \" + o.name}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </th>\r\n                    <th key={\"targetMachines\" + this.props.step}>\r\n                        {Number(this.props.targetMachines).toFixed(2)}\r\n                    </th>\r\n                    <th key={\"targetInputs\" + this.props.step}>\r\n                        {\r\n                            this.props.inputs.map((o, index) => {\r\n                                return (\r\n                                    <div key={index}>\r\n                                        <b>{Number(o.quantity * this.props.targetMachines /\r\n                                            (this.props.overclock === 'true' ? this.props.timeoc : this.props.time)\r\n                                        ).toFixed(2) + o.unit}</b>\r\n                                        {\" \" + o.name}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </th>\r\n                    <th key={\"targetOutputs\" + this.props.step}>\r\n                        {\r\n                            this.props.outputs.map((o, index) => {\r\n                                return (\r\n                                    <div key={index}>\r\n                                        <b>{Number(o.quantity * this.props.targetMachines /\r\n                                            (this.props.overclock === 'true' ? this.props.timeoc : this.props.time)\r\n                                        ).toFixed(2) + o.unit}</b>\r\n                                        {\" \" + o.name}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </th>\r\n                    <th key={\"modify\" + this.props.step}>\r\n                        <MDBBadge\r\n                            tag=\"a\"\r\n                            color=\"light\"\r\n                            size=\"sm\"\r\n                            className=\"m-sm-1\"\r\n                            onClick={() => this.props.onSwapUp(Number(this.props.step))}\r\n                        >Up</MDBBadge>\r\n                        <MDBBadge\r\n                            tag=\"a\"\r\n                            color=\"light\"\r\n                            size=\"sm\"\r\n                            className=\"m-sm-1\"\r\n                            onClick={() => this.props.onSwapDown(Number(this.props.step))}\r\n                        >Down</MDBBadge>\r\n                        <MDBBadge\r\n                            tag=\"a\"\r\n                            color=\"danger\"\r\n                            size=\"sm\"\r\n                            className=\"m-sm-1\"\r\n                            onClick={() => this.props.onDelete(Number(this.props.step))}\r\n                        >Remove</MDBBadge>\r\n                    </th>\r\n                </tr>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Recipe","import React, { Component } from 'react';\r\nimport { MDBBadge, MDBInput, MDBAlert } from 'mdbreact';\r\nimport * as data from './data';\r\nimport { ParseItems } from './helpers/UIHelpers';\r\nconst tierNames = data.TierNames;\r\n\r\nclass AddRecipe extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            tier: tierNames[0],\r\n            overclock: false,\r\n            errorAlert: \"invisible\",\r\n            errorText: \" \"\r\n        };\r\n    }\r\n\r\n    handleInputChange = inputName => value => {\r\n        const nextValue = value;\r\n        this.setState({\r\n            [inputName]: nextValue,\r\n            errorAlert: \"invisible\"\r\n        });\r\n    }\r\n\r\n    handleSelectChange = (inputName, selectValue) => {\r\n        this.setState({\r\n            [inputName]: selectValue\r\n        });\r\n    }\r\n\r\n    handleDataValidation = () => {\r\n        let isValid = true;\r\n        let rawRecipe = this.state;\r\n        for (const property in rawRecipe) {\r\n            if (rawRecipe[property] === null || rawRecipe[property] === \"\") {\r\n                isValid = false;\r\n            }\r\n        }\r\n\r\n        if (isValid && Object.keys(rawRecipe).length === 9) {\r\n            let inputList = [];\r\n            let outputList = [];\r\n            try {\r\n                inputList = ParseItems(rawRecipe.rawInput);\r\n                outputList = ParseItems(rawRecipe.rawOutput);\r\n\r\n                for (let index in inputList) {\r\n                    if (isNaN(inputList[index].quantity)) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n\r\n                for (let index in outputList) {\r\n                    if (isNaN(outputList[index].quantity)) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n\r\n                for (let index in inputList) {\r\n                    if (!(inputList[index].unit === \"mb\" || inputList[index].unit === \"b\")) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n\r\n                for (let index in outputList) {\r\n                    if (!(outputList[index].unit === \"mb\" || outputList[index].unit === \"b\")) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n            }\r\n            catch (error) {\r\n                isValid = false;\r\n            }\r\n\r\n            if (isValid) {\r\n                let newRecipe = {\r\n                    machine: rawRecipe.machine,\r\n                    tier: rawRecipe.tier,\r\n                    overclock: false,\r\n                    rft: rawRecipe.rft,\r\n                    time: rawRecipe.time,\r\n                    inputs: [...inputList],\r\n                    outputs: [...outputList]\r\n                }\r\n                this.props.onAdd(newRecipe);\r\n            }\r\n            else {\r\n                this.setState({\r\n                    errorAlert: \"visible\",\r\n                    errorText: \"Invalid: Check item format\"\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({\r\n                errorAlert: \"visible\",\r\n                errorText: \"Invalid: Missing info.\"\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //this builds the options list for tiers\r\n        return (\r\n            <React.Fragment>\r\n                <tr>\r\n                    <th key=\"stepAdd\"></th>\r\n                    <th key=\"machineAdd\">\r\n                        <MDBInput\r\n                            type=\"text\"\r\n                            className=\"form-control-sm\"\r\n                            id=\"machineText\"\r\n                            label=\"Machine\"\r\n                            getValue={this.handleInputChange(\"machine\")}\r\n                        />\r\n                    </th>\r\n                    <th key=\"tierAdd\" className=\"align-middle\">\r\n                        <select\r\n                            className=\"browser-default custom-select\"\r\n                            id=\"tierSelect\"\r\n                            value={this.state.tier}\r\n                            onChange={(e) => this.handleSelectChange(\"tier\", e.target.value)}\r\n                        >\r\n                            {tierNames.map((tier) =>\r\n                                <option key={\"tier:\" + tier} value={tier}>{tier}</option>)}\r\n                        </select>\r\n                    </th>\r\n                    <th></th>\r\n                    <th key=\"rftAdd\">\r\n                        <MDBInput\r\n                            type=\"number\"\r\n                            step=\"o.o1\"\r\n                            min=\"0\"\r\n                            className=\"form-control-sm\"\r\n                            id=\"RfTText\"\r\n                            label=\"RF/T\"\r\n                            getValue={this.handleInputChange(\"rft\")}\r\n                        />\r\n                    </th>\r\n                    <th key=\"timeAdd\">\r\n                        <MDBInput\r\n                            type=\"number\"\r\n                            step=\"o.o1\"\r\n                            min=\"0\"\r\n                            className=\"form-control-sm\"\r\n                            id=\"timeText\"\r\n                            label=\"time (s)\"\r\n                            getValue={this.handleInputChange(\"time\")}\r\n                        />\r\n                    </th>\r\n                    <th></th>\r\n                    <th key=\"inputItemAdd\">\r\n                        <MDBInput\r\n                            type=\"text\"\r\n                            className=\"form-control-sm\"\r\n                            id=\"inputItemsText\"\r\n                            label=\"Input\"\r\n                            getValue={this.handleInputChange(\"rawInput\")}\r\n                        />\r\n                    </th>\r\n                    <th key=\"outputItemAdd\">\r\n                        <MDBInput\r\n                            type=\"text\"\r\n                            className=\"form-control-sm\"\r\n                            id=\"outputItemsText\"\r\n                            label=\"Output\"\r\n                            getValue={this.handleInputChange(\"rawOutput\")}\r\n                        />\r\n                    </th>\r\n                    <th></th>\r\n                    <th key=\"errorAdd\" className=\"align-middle\">\r\n                        <MDBAlert\r\n                            color=\"danger\"\r\n                            className={this.state.errorAlert}\r\n                            id=\"errorAlert\"\r\n                        >\r\n                            {this.state.errorText}\r\n                        </MDBAlert>\r\n                    </th>\r\n                    <th></th>\r\n                    <th key=\"modifyAdd\" className=\"align-middle\">\r\n                        <MDBBadge\r\n                            tag=\"a\"\r\n                            color=\"light\"\r\n                            size=\"sm\"\r\n                            className=\"m-sm-1\"\r\n                            onClick={() => this.handleDataValidation()}\r\n                        >Add</MDBBadge>\r\n                    </th>\r\n                </tr>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddRecipe\r\n","import React, { Component } from 'react';\r\nimport { MDBCard, MDBCardBody, MDBTable, MDBTableBody, MDBTableHead, MDBRow, MDBCol } from 'mdbreact';\r\nimport Recipe from './Recipe';\r\nimport AddRecipe from './AddRecipe';\r\n\r\nclass TableSection extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <MDBRow>\r\n                    <MDBCol>\r\n                        <MDBCard>\r\n                            <MDBCardBody>\r\n                                <MDBTable responsive hover striped>\r\n                                    <MDBTableHead color=\"blue lighten-4\">\r\n                                        <tr>\r\n                                            {\r\n                                                (this.props.headers.map((header, index) => (\r\n                                                    <th key={\"header\" + index} className=\"align-middle text-uppercase font-weight-bold\">{header}</th>\r\n                                                )))\r\n                                            }\r\n                                        </tr>\r\n                                    </MDBTableHead>\r\n                                    <MDBTableBody>\r\n                                        {\r\n                                            this.props.recipes.map(recipe => (\r\n                                                <Recipe\r\n                                                    key={recipe.step}\r\n                                                    step={recipe.step}\r\n                                                    machine={recipe.machine}\r\n                                                    tier={recipe.tier}\r\n                                                    overclock={recipe.overclock}\r\n                                                    rft={recipe.rft}\r\n                                                    rftoc={recipe.rftoc}\r\n                                                    time={recipe.time}\r\n                                                    timeoc={recipe.timeoc}\r\n                                                    efficiency={recipe.efficiency}\r\n                                                    efficiencyoc={recipe.efficiencyoc}\r\n                                                    inputs={recipe.inputs}\r\n                                                    outputs={recipe.outputs}\r\n                                                    targetMachines={recipe.targetMachines}\r\n                                                    onDelete={this.props.handleDelete}\r\n                                                    onChangeTier={this.props.handleTiers}\r\n                                                    onChange={this.props.handleOverclock}\r\n                                                    onSwapUp={this.props.handleSwapUp}\r\n                                                    onSwapDown={this.props.handleSwapDown}\r\n                                                />\r\n                                            ))\r\n                                        }\r\n                                        {\r\n                                            //adds a line for adding a recipe\r\n                                            <AddRecipe\r\n                                                onAdd={this.props.handleAdd}\r\n                                            />\r\n                                        }\r\n                                    </MDBTableBody>\r\n                                </MDBTable>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TableSection;","import React, { Component } from 'react';\r\nimport data from './sections/data';\r\nimport exampleRecipes from './sections/example';\r\nimport { Overclock, GenerateRecipeGraph } from './sections/helpers/RecipeHelpers';\r\nimport { BuildOptions, CalculateRatio, OutputRecipes } from './sections/helpers/UIHelpers';\r\nimport InformationSection from './sections/InformationSection';\r\nimport SankeySection from './sections/SankeySection';\r\nimport TableSection from './sections/TableSection';\r\n\r\nclass DashboardPage extends Component {\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            headers: data.Headers.map(headers => {\r\n                return (headers.label)\r\n            }),\r\n            recipes: CalculateRatio(exampleRecipes.Recipes),\r\n            targets: {\r\n                \"item\": {\r\n                    step: 9,\r\n                    name: \"Polymer Clay\",\r\n                    ratio: 1 / 3\r\n                },\r\n                \"machines\": 1,\r\n                \"bps\": 1 / 3\r\n            },\r\n            labels: BuildOptions(exampleRecipes.Recipes)\r\n        }\r\n    }\r\n\r\n    handleDelete = recipeStep => {\r\n        const state = this.state;\r\n        state.recipes = state.recipes.filter(r => Number(r.step) !== recipeStep);\r\n\r\n        for (let index in state.recipes) {\r\n            state.recipes[index].step = index;\r\n            state.recipes[index].outputs.map(output => (\r\n                output.step = index\r\n            ))\r\n        }\r\n\r\n        if (recipeStep === state.targets.item.step) {\r\n            state.targets.item.step = null;\r\n            state.targets.item.name = \"\";\r\n            state.targets.item.ratio = 0;\r\n            state.targets.bps = 0;\r\n            state.targets.machines = 0;\r\n            state.targets.disable = true;\r\n        }\r\n\r\n        let labels = BuildOptions(this.state.recipes);\r\n\r\n        this.setState({ state, labels });\r\n    };\r\n\r\n    handleOverclock = (recipeId, status) => {\r\n        let recipes = this.state.recipes;\r\n        recipes[recipeId].overclock = status;\r\n\r\n        let results = Overclock(recipes[recipeId].rft / 4, recipes[recipeId].tier, recipes[recipeId].time * 20);\r\n        recipes[recipeId].rftoc = results.eut * 4;\r\n        recipes[recipeId].timeoc = results.ticks / 20;\r\n        recipes[recipeId].efficiencyoc =\r\n            100 * (recipes[recipeId].rft * recipes[recipeId].time) /\r\n            (recipes[recipeId].rftoc * recipes[recipeId].timeoc);\r\n\r\n        let graph = GenerateRecipeGraph(recipes, this.state.targets);\r\n        recipes = OutputRecipes(graph, recipes);\r\n\r\n        this.setState({ recipes });\r\n    };\r\n\r\n    handleTiers = (recipeId, status) => {\r\n        let recipes = this.state.recipes;\r\n        recipes[recipeId].tier = status;\r\n\r\n        let results = Overclock(recipes[recipeId].rft / 4, recipes[recipeId].tier, recipes[recipeId].time * 20);\r\n        recipes[recipeId].rftoc = results.eut * 4;\r\n        recipes[recipeId].timeoc = results.ticks / 20;\r\n        recipes[recipeId].efficiencyoc =\r\n            100 * (recipes[recipeId].rft * recipes[recipeId].time) /\r\n            (recipes[recipeId].rftoc * recipes[recipeId].timeoc);\r\n\r\n        let graph = GenerateRecipeGraph(recipes, this.state.targets);\r\n        recipes = OutputRecipes(graph, recipes);\r\n\r\n        this.setState({ recipes })\r\n    };\r\n\r\n    handleSwapDown = recipeStep => {\r\n        if (recipeStep < this.state.recipes.length - 1) {\r\n            let recipes = this.state.recipes;\r\n            console.log(this.state.recipes);\r\n            console.log(recipes);\r\n            let currentItem = recipes[recipeStep];\r\n            let nextItem = recipes[recipeStep + 1];\r\n\r\n            currentItem.step = recipeStep + 1;\r\n            currentItem.outputs.map(output => (\r\n                output.step = recipeStep + 1\r\n            ));\r\n\r\n            nextItem.step = recipeStep;\r\n            nextItem.outputs.map(output => (\r\n                output.step = recipeStep\r\n            ));\r\n\r\n            recipes[recipeStep] = nextItem;\r\n            recipes[recipeStep + 1] = currentItem;\r\n\r\n            this.setState({ recipes });\r\n        }\r\n    };\r\n\r\n    handleSwapUp = recipeStep => {\r\n        if (recipeStep > 0) {\r\n            let recipes = this.state.recipes;\r\n            let currentItem = recipes[recipeStep];\r\n            let nextItem = recipes[recipeStep - 1];\r\n\r\n            currentItem.step = recipeStep - 1;\r\n            currentItem.outputs.map(output => (\r\n                output.step = recipeStep - 1\r\n            ));\r\n\r\n            nextItem.step = recipeStep;\r\n            nextItem.step = recipeStep;\r\n            nextItem.outputs.map(output => (\r\n                output.step = recipeStep\r\n            ));\r\n\r\n            recipes[recipeStep] = nextItem;\r\n            recipes[recipeStep - 1] = currentItem;\r\n\r\n            this.setState({ recipes });\r\n        }\r\n    };\r\n\r\n    handleAdd = newRecipe => {\r\n        let recipes = this.state.recipes;\r\n        let nextStep = this.state.recipes.length;\r\n\r\n        recipes.push(\r\n            {\r\n                step: nextStep,\r\n                machine: newRecipe.machine,\r\n                tier: newRecipe.tier,\r\n                overclock: newRecipe.overclock,\r\n                rft: newRecipe.rft,\r\n                time: newRecipe.time,\r\n                efficiency: 100,\r\n                inputs: [...newRecipe.inputs],\r\n                outputs: [...newRecipe.outputs]\r\n            }\r\n        );\r\n\r\n        recipes = CalculateRatio(recipes);\r\n        let graph = GenerateRecipeGraph(recipes, this.state.targets);\r\n        recipes = OutputRecipes(graph, recipes);\r\n        let labels = BuildOptions(this.state.recipes);\r\n\r\n        this.setState({ recipes, labels });\r\n    };\r\n\r\n    handleSettingChange = (update, type = \"name\") => {\r\n        let targets = this.state.targets;\r\n        if (targets.item.name === \"\") {\r\n            if (type === \"name\") {\r\n                targets.item.name = update;\r\n                targets.item.ratio = update.ratio;\r\n                targets.item.step = update.step;\r\n                targets.machines = 1;\r\n                targets.bps = targets.item.ratio.toFixed(2);\r\n                targets.disable = false;\r\n            }\r\n        }\r\n        else if (type === \"name\") {\r\n            targets.item.name = update;\r\n            targets.item.ratio = update.ratio;\r\n            targets.item.step = update.step;\r\n            targets.machines = 1;\r\n            targets.bps = (targets.machines * targets.item.ratio).toFixed(2);\r\n        }\r\n        else if (type === \"machine\") {\r\n            if (update <= 0) {\r\n                targets.machines = 0;\r\n                targets.bps = 0;\r\n            }\r\n            else {\r\n                targets.machines = update;\r\n                targets.bps = (targets.machines * targets.item.ratio).toFixed(2);\r\n            }\r\n        }\r\n        else {\r\n            if (update <= 0) {\r\n                targets.bps = 0;\r\n                targets.machines = 0;\r\n            }\r\n            else {\r\n                targets.bps = Number(update).toFixed(2);\r\n                targets.machines = update / targets.item.ratio;\r\n            }\r\n        }\r\n\r\n        this.setState({ targets });\r\n        let recipes = this.state.recipes;\r\n        recipes[targets.item.step].targetMachines = targets.machines;\r\n        let graph = GenerateRecipeGraph(this.state.recipes, this.state.targets);\r\n        recipes = OutputRecipes(graph, this.state.recipes);\r\n        this.setState({ recipes });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <InformationSection\r\n                    outputs={this.state.labels}\r\n                    targets={this.state.targets}\r\n                    handleSettingChange={this.handleSettingChange}\r\n                />\r\n                <TableSection\r\n                    headers={this.state.headers}\r\n                    recipes={this.state.recipes}\r\n                    handleDelete={this.handleDelete}\r\n                    handleTiers={this.handleTiers}\r\n                    handleOverclock={this.handleOverclock}\r\n                    handleSwapDown={this.handleSwapDown}\r\n                    handleSwapUp={this.handleSwapUp}\r\n                    handleAdd={this.handleAdd}\r\n                    handleMachineSetting={this.handleMachineSetting}\r\n                />\r\n                <SankeySection recipes={this.state.recipes} targets={this.state.targets} />\r\n            </React.Fragment>\r\n        )\r\n    } changes\r\n}\r\n\r\nexport default DashboardPage;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport DashboardPage from './pages/DashboardPage';\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route path='/ProductionChain/' exact component={DashboardPage} />\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","import React, { Component } from 'react';\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink, MDBIcon } from 'mdbreact';\n\nclass TopNavigation extends Component {\n    state = {\n        collapse: false\n    }\n\n    onClick = () => {\n        this.setState({\n            collapse: !this.state.collapse,\n        });\n    }\n\n    toggle = () => {\n        this.setState({\n            dropdownOpen: !this.state.dropdownOpen\n        });\n    }\n\n    render() {\n        return (\n            <MDBNavbar className=\"flexible-navbar\" light expand=\"md\" scrolling>\n                <MDBNavbarBrand href=\"/\">\n                    <strong>ProductionChain</strong>\n                </MDBNavbarBrand>\n                <MDBNavbarToggler onClick = { this.onClick } />\n                <MDBCollapse isOpen = { this.state.collapse } navbar>\n                    <MDBNavbarNav left>\n                        <MDBNavItem active>\n                            <MDBNavLink to=\"#\">Home</MDBNavLink>\n                        </MDBNavItem>\n                    </MDBNavbarNav>\n                    <MDBNavbarNav right>\n                        <MDBNavItem>\n                            <a className=\"border border-light rounded mr-1 nav-link Ripple-parent\" rel=\"noopener noreferrer\" href=\"https://github.com/SimonNguyen/ProductionChain\" target=\"_blank\"><MDBIcon fab icon=\"github\" className=\"mr-2\"/>PC GitHub</a>\n                        </MDBNavItem>\n                    </MDBNavbarNav>\n                </MDBCollapse>\n            </MDBNavbar>\n        );\n    }\n}\n\nexport default TopNavigation;","import React from 'react';\nimport { MDBFooter, MDBIcon } from 'mdbreact';\n\nconst Footer = () => {\n    return (\n        <MDBFooter color=\"blue\" className=\"text-center font-small darken-2\">\n            <div className=\"pb-4\">\n                <MDBIcon fab icon=\"github\" className=\"mr-3\"/>\n            </div>\n            <p className=\"footer-copyright mb-0 py-3 text-center\">\n                &copy; {new Date().getFullYear()} Copyright: <a href=\"/#\"> ProductionChain </a>\n            </p>\n        </MDBFooter>\n    );\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport Routes from '../src/components/Routes';\nimport TopNavigation from './components/topNavigation';\nimport Footer from './components/Footer';\nimport './index.css';\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className=\"flexible-content\">\n                <TopNavigation />\n                <main id=\"content\" className=\"p-5\">\n                    <Routes />\n                </main>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}