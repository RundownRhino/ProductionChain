{"version":3,"sources":["components/pages/sections/helpers/RecipeHelpers.js","components/pages/sections/helpers/UIHelpers.js","components/pages/sections/InformationSection.js","components/pages/sections/SankeySection.js","components/pages/sections/DisplayRFtTime.js","components/pages/sections/Recipe.js","components/pages/sections/AddRecipe.js","components/pages/sections/TableSection.js","components/pages/DashboardPage.js","components/pages/NotFoundPage.js","components/Routes.js","components/topNavigation.js","components/Footer.js","App.js","registerServiceWorker.js","index.js"],"names":["tierNames","data","voltages","colors","Overclock","EUt","tierName","duration","tier","indexOf","resultEUt","resultDuration","multiplier","eut","ticks","Math","ceil","GenerateSankeyData","recipes","sankeyData","push","type","orientation","valueformat","valuesuffix","domain","x","y","node","pad","thickness","line","color","width","label","link","colorscales","colorscale","labels","arguments","length","undefined","forEach","recipe","inputs","input","name","outputs","output","GetLabels","Object","assign","links","source","target","value","unit","quantity","targetMachines","step","machine","hex","opacity","replace","r","parseInt","substring","g","b","HexToRGB","floor","random","GetLinks","GenerateRecipeGraph","targets","directedGraph","DirectedGraph","addNode","Number","machineName","machines","time","overclock","timeoc","visited","graph","sourceNode","edgeGraph","forEachNode","sourceAttributes","targetAttributes","addDirectedEdge","inputName","inputQuantity","inputTime","outputName","outputQuantity","outputTime","CalculateEdges","acyclicGraph","adjList","edges","forEachEdge","edge","attributes","values","FindAdjList","cycles","findCircuits","tmpGraph","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","cycle","dropEdge","err","return","FixGraph","RemoveCycles","reverse","item","DepthFirstTraversal","getNodeAttributes","forEachOutNeighbor","targetNode","getEdgeAttributes","inBPS","outBPS","inDegree","currentTarget","getNodeAttribute","setNodeAttribute","ParseItems","raw","endsWith","newRaw","slice","list","split","items","index","trim","OutputRecipes","CalculateRatio","BuildOptions","options","newOption","InformationSection","_this","this","react_default","a","createElement","Fragment","mdbreact_esm","className","react_select_es","onChange","e","props","handleSettingChange","map","opt","min","id","bps","Component","SankeySection","react_plotly_default","layout","autosize","title","config","displayModeBar","responsive","useResizeHandler","style","position","DisplayRFtTime","overclocked","displayRFt","rft","displayTime","displayEfficiency","efficiency","rftoc","efficiencyoc","key","toFixed","Recipe","onChangeTier","sections_DisplayRFtTime","n","o","tag","size","onClick","onSwapUp","onSwapDown","onDelete","AddRecipe","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","_this$setState","nextValue","setState","defineProperty","handleSelectChange","selectValue","handleDataValidation","isValid","rawRecipe","state","property","keys","inputList","outputList","rawInput","rawOutput","isNaN","toLowerCase","error","newRecipe","toConsumableArray","onAdd","errorAlert","errorText","_this2","getValue","TableSection","autoWidth","hover","striped","headers","header","sections_Recipe","handleDelete","handleTiers","handleOverclock","handleSwapUp","handleSwapDown","sections_AddRecipe","handleAdd","DashboardPage","recipeStep","filter","_loop","ratio","recipeId","status","results","currentItem","nextItem","nextStep","update","Headers","exampleRecipes","Recipes","sections_InformationSection","sections_TableSection","handleMachineSetting","sections_SankeySection","NotFoundPage","md","alt","src","Routes","react_router","path","exact","component","React","TopNavigation","collapse","toggle","dropdownOpen","light","expand","scrolling","href","isOpen","navbar","left","active","to","right","rel","fab","icon","Footer","Date","getFullYear","App","topNavigation","components_Routes","components_Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","react_router_dom","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.502c5f3c.chunk.js","sourcesContent":["import { DirectedGraph } from 'graphology';\r\nimport reverse from 'graphology-operators/reverse';\r\nimport findCircuits from 'elementary-circuits-directed-graph';\r\nimport * as data from '../data';\r\nlet tierNames = data.TierNames;\r\nlet voltages = data.Voltages;\r\nlet colors = data.Colors;\r\n\r\n/**\r\n * Adapted from GregTech Community Edition calculateOverclock function.\r\n * https://github.com/GregTechCE/GregTech/blob/master/src/main/java/gregtech/api/capability/impl/AbstractRecipeLogic.java\r\n * Returns object containing { rft: number, time: number }\r\n * \r\n * @export\r\n * @param {Number} EUt - EU per tick\r\n * @param {String} tierName - GregTech machine tier\r\n * @param {Number} duration - Recipe duration in ticks\r\n * @returns \r\n */\r\nexport function Overclock(EUt, tierName, duration) {\r\n    let tier = tierNames.indexOf(tierName) - 1;\r\n    let resultEUt = EUt;\r\n    let resultDuration = duration;\r\n    let multiplier = 0;\r\n\r\n    if (voltages[tier] <= EUt || tier === 0) {\r\n        return {\r\n            eut: resultEUt,\r\n            ticks: resultDuration\r\n        }\r\n    };\r\n\r\n    if (EUt <= 16) {\r\n        if (EUt <= 8) {\r\n            multiplier = tier;\r\n        } else {\r\n            multiplier = tier - 1;\r\n        };\r\n\r\n        resultEUt = EUt * (1 << multiplier) * (1 << multiplier);\r\n        resultDuration = duration / (1 << multiplier);\r\n\r\n        return {\r\n            eut: resultEUt,\r\n            ticks: resultDuration\r\n        }\r\n    } else {\r\n        while (resultDuration >= 3 && resultEUt <= voltages[tier - 1]) {\r\n            resultEUt = resultEUt * 4;\r\n            resultDuration = resultDuration / 2.8;\r\n        }\r\n    };\r\n    \r\n    return {\r\n        eut: resultEUt,\r\n        ticks: Math.ceil(resultDuration)\r\n    };\r\n}\r\n\r\n/**\r\n * Sankey diagram data for React-Plotly.js Sankey diagrams.\r\n *\r\n * @export\r\n * @param {Object} recipes - Input object containing recipes\r\n * @returns \r\n */\r\nexport function GenerateSankeyData(recipes) {\r\n    let sankeyData = {};\r\n    sankeyData.data = [];\r\n    sankeyData.data.push({\r\n        type: \"sankey\",\r\n        orientation: \"h\",\r\n        valueformat: \".3f\",\r\n        valuesuffix: \" Blocks\",\r\n        domain: {\r\n            \"x\": [\r\n                0,\r\n                1\r\n            ],\r\n            \"y\": [\r\n                0,\r\n                1\r\n            ]\r\n        },\r\n        node: {\r\n            pad: 15,\r\n            thickness: 15,\r\n            line: {\r\n                color: \"black\",\r\n                width: 0.5\r\n            },\r\n            label: []\r\n        },\r\n        link: {\r\n            colorscales: [{\r\n                colorscale: \"Rainbow\"\r\n            }]\r\n        }\r\n    });\r\n\r\n    let labels = GetLabels(recipes);\r\n    sankeyData.data[0].node.label = labels;\r\n    sankeyData.data[0].link = Object.assign(sankeyData.data[0].link, GetLinks(recipes, labels));\r\n\r\n    return sankeyData;\r\n}\r\n\r\n/**\r\n * Returns a list of item labels. Valid types are \"both\", \"inputs\" and \"outputs\".\r\n * By default, the type is both.\r\n *\r\n * @export\r\n * @param {*} type\r\n * @param {*} recipes - Input object containing recipes\r\n * @returns\r\n */\r\nexport function GetLabels(recipes, type = \"both\") {\r\n    let labels = [];\r\n\r\n    recipes.forEach(recipe => {\r\n        if (type === \"both\" || type === \"inputs\") {\r\n            recipe.inputs.forEach(input => {\r\n                if (labels.indexOf(input.name) === -1) {\r\n                    labels.push(input.name);\r\n                }\r\n            })\r\n        }\r\n\r\n        if (type === \"both\" || type === \"outputs\") {\r\n            recipe.outputs.forEach(output => {\r\n                if (labels.indexOf(output.name) === -1) {\r\n                    labels.push(output.name);\r\n                }\r\n            })\r\n        }\r\n    })\r\n\r\n    return labels;\r\n}\r\n\r\n/**\r\n *An object containing React-Plotly.js Sankey diagram links\r\n *\r\n * @param {*} recipes - Input object containing recipes\r\n * @param {*} labels - Input array containing item labels\r\n * @returns\r\n */\r\nfunction GetLinks(recipes, labels) {\r\n    let links = {\r\n        source: [],\r\n        target: [],\r\n        value: [],\r\n        label: [],\r\n        color: []\r\n    };\r\n\r\n    recipes.forEach(recipe => {\r\n        recipe.inputs.forEach(input => {\r\n            recipe.outputs.forEach(output => {\r\n                links.source.push(labels.indexOf(input.name));\r\n                links.target.push(labels.indexOf(output.name));\r\n                (output.unit === 'b') ? links.value.push(output.quantity * recipe.targetMachines) : links.value.push(output.quantity * recipe.targetMachines / 1000);\r\n                links.label.push(recipe.step + \": \" + recipe.machine + \" (\" + recipe.tier + \")\");\r\n                links.color.push(HexToRGB(colors[Math.floor(Math.random() * colors.length)], 50));\r\n            })\r\n        })\r\n    })\r\n\r\n    return links;\r\n}\r\n\r\n/**\r\n *Returns an RGBA color value\r\n *\r\n * @param {String} hex - Input hex color string\r\n * @param {Number} opacity - Input opacity value between 0 and 100\r\n * @returns {String}\r\n */\r\nfunction HexToRGB(hex, opacity) {\r\n    hex = hex.replace('#', '');\r\n    let r = parseInt(hex.substring(0, 2), 16);\r\n    let g = parseInt(hex.substring(2, 4), 16);\r\n    let b = parseInt(hex.substring(4, 6), 16);\r\n\r\n    let result = 'rgba(' + r + ',' + g + ',' + b + ',' + opacity / 100 + ')';\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n *A directed graph for recipe calculations.\r\n *\r\n * @export\r\n * @param {*} recipes - Input object containing recipes\r\n * @returns\r\n */\r\nexport function GenerateRecipeGraph(recipes, targets) {\r\n    let directedGraph = new DirectedGraph();\r\n\r\n    recipes.forEach(recipe => {\r\n        directedGraph.addNode(Number(recipe.step), {\r\n            machineName: recipe.machine,\r\n            targetMachines: targets.machines,\r\n            time: recipe.overclock === 'true' ? recipe.timeoc : recipe.time,\r\n            inputs: recipe.inputs,\r\n            outputs: recipe.outputs,\r\n            visited: false\r\n        });\r\n    })\r\n\r\n    let edgeGraph = CalculateEdges(directedGraph);\r\n    let reversedGraph = reverse(edgeGraph);\r\n    let acyclicGraph = RemoveCycles(reversedGraph);\r\n\r\n    let calculatedGraph = CalculateGraph(acyclicGraph, targets.item.step);\r\n    return calculatedGraph;\r\n}\r\n\r\nfunction CalculateGraph(graph, sourceNode) {\r\n    return DepthFirstTraversal(graph, sourceNode);\r\n}\r\n\r\n// TODO: Optimize edge calculation\r\nfunction CalculateEdges(graph) {\r\n    let edgeGraph = graph;\r\n\r\n    edgeGraph.forEachNode((source, sourceAttributes) => {\r\n        sourceAttributes.outputs.forEach(output => {\r\n            edgeGraph.forEachNode((target, targetAttributes) => {\r\n                if (source !== target) {\r\n                    targetAttributes.inputs.forEach(input => {\r\n                        if (input.name === output.name) {\r\n                            edgeGraph.addDirectedEdge(source, target, {\r\n                                inputName: input.name,\r\n                                inputQuantity: input.quantity,\r\n                                inputTime: targetAttributes.time,\r\n                                outputName: output.name,\r\n                                outputQuantity: output.quantity,\r\n                                outputTime: sourceAttributes.time\r\n                            });\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    })\r\n\r\n    return edgeGraph;\r\n}\r\n\r\nfunction DepthFirstTraversal(graph, sourceNode) {\r\n    let sourceAttributes = graph.getNodeAttributes(sourceNode);\r\n\r\n    graph.forEachOutNeighbor(sourceNode, function (targetNode, targetAttributes) {\r\n        let edge = graph.getEdgeAttributes(sourceNode, targetNode);\r\n        let inBPS = (edge.inputQuantity / edge.inputTime) * sourceAttributes.targetMachines;\r\n        let outBPS = edge.outputQuantity / edge.outputTime;\r\n        let targetMachines = inBPS / outBPS;\r\n\r\n        if (targetAttributes.visited && graph.inDegree(targetNode) > 1) {\r\n            let currentTarget = graph.getNodeAttribute(targetNode, \"targetMachines\", targetMachines);\r\n            graph.setNodeAttribute(targetNode, \"targetMachines\", currentTarget + targetMachines);\r\n        } else {\r\n            graph.setNodeAttribute(targetNode, \"targetMachines\", targetMachines);\r\n            graph.setNodeAttribute(targetNode, \"visited\", true);\r\n        }\r\n\r\n        return DepthFirstTraversal(graph, targetNode);\r\n    })\r\n\r\n    return graph;\r\n}\r\n\r\nfunction RemoveCycles(graph) {\r\n    let adjList = FindAdjList(graph);\r\n    let cycles = findCircuits(adjList);\r\n    let acyclicGraph = FixGraph(graph, cycles);\r\n\r\n    return acyclicGraph;\r\n}\r\n\r\nfunction FindAdjList(graph) {\r\n    let edges = [];\r\n\r\n    graph.forEachNode(node => {\r\n        edges[node] = [];\r\n    })\r\n\r\n    graph.forEachEdge(\r\n        (edge, attributes, source, target, sourceAttributes, targetAttributes) => {\r\n            edges[source].push(Number(target));\r\n        });\r\n    let adjList = Object.values(edges);\r\n\r\n    return adjList;\r\n}\r\n\r\nfunction FixGraph(graph, cycles) {\r\n    let tmpGraph = graph;\r\n\r\n    for (let cycle of cycles) {\r\n        let source = cycle[0];\r\n        let target = cycle[1];\r\n\r\n        tmpGraph.dropEdge((tmpGraph.edge(source, target)));\r\n    }\r\n\r\n    return graph;\r\n}","/**\r\n *A Parsing function that converts a string into\r\n *an item object array\r\n * \r\n * @export\r\n * @param {String} raw - Input string to parse.\r\n * @return {array} - the parse items object array\r\n */\r\nexport function ParseItems(raw) {\r\n    if (raw.endsWith(';')) {\r\n        let newRaw = raw.slice(0, -1);\r\n        raw = newRaw;\r\n    }\r\n\r\n    let list = raw.split(';');\r\n    let items = [];\r\n    for (let index in list) {\r\n        let item = list[index].split(',');\r\n        items.push(\r\n            {\r\n                quantity: item[0].trim(),\r\n                unit: item[1].trim(),\r\n                name: item[2].trim()\r\n            }\r\n        )\r\n    };\r\n    return items;\r\n}\r\n\r\nexport function OutputRecipes(graph, recipes) {\r\n    recipes.forEach((recipe, node) => {\r\n        recipe.targetMachines = graph.getNodeAttribute(node, \"targetMachines\");\r\n    })\r\n\r\n    return recipes;\r\n}\r\n\r\nexport function CalculateRatio(recipes) {\r\n    //Calculates the items Units/second ratio and adds it to outputs.\r\n    recipes.forEach(recipe => {\r\n        let step = recipe.step;\r\n        let time = recipe.time;\r\n\r\n        recipe.outputs.forEach(output => {\r\n            output[\"ratio\"] = output.quantity / time;\r\n            output[\"step\"] = step;\r\n        });\r\n    });\r\n\r\n    return recipes;\r\n}\r\n\r\nexport function BuildOptions(recipes) {\r\n    //label: {item} + ' - #' + {step}, value={outputObj}\r\n    let options = [];\r\n\r\n    recipes.forEach(recipe => {\r\n        recipe.outputs.forEach(output => {\r\n            let newOption = {\r\n                label: output.name + ' - #' + output.step,\r\n                value: output\r\n            }\r\n            options.push(newOption);\r\n        })\r\n    })\r\n\r\n    return options;\r\n}","import React, { Component } from 'react';\r\nimport { MDBCard, MDBCardTitle, MDBCardText, MDBRow, MDBCol, MDBInput } from 'mdbreact';\r\nimport Select from 'react-select';\r\n\r\nclass InformationSection extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <MDBRow>\r\n                    <MDBCol>\r\n                        <MDBCard className=\"card-body\">\r\n                            <MDBCardTitle className=\"text-center\">Instructions</MDBCardTitle>\r\n                            <MDBCardText>\r\n                                GregTech machines should have their EU/t values converted to RF/t. The equivalent RF/t value is <code>4 * EUt</code>.\r\n                            <br />Efficiency % is the energy efficiency of the overclock.\r\n                            <br />Item input/output format is [Quantity],[Unit],[item]; ...ext.\r\n                            <br /> -> Quantity is the number of units needed per operation\r\n                            <br /> -> Unit must be either b for block, or mb for millibuckets\r\n                            <br /> -> item is the name of the item.  This is case sensitive!\r\n                            <br /> Example: 1000, mb, Lava; 1000, mb, Water;\r\n                                The production chain is not calculated with any recycled items in mind.\r\n                                The resultant production chain visual is not updated to show that the items are ignored.\r\n                            </MDBCardText>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                    <MDBCol>\r\n                        <MDBCard className=\"card-body\">\r\n                            <MDBCardTitle className=\"text-center\">Settings</MDBCardTitle>\r\n                            <form>\r\n                                <Select\r\n                                    onChange={(e) => this.props.handleSettingChange(e.value)}\r\n                                    options={this.props.outputs.map(opt => ({label: opt.label, value: opt.value}))}\r\n                                />\r\n                                <MDBInput\r\n                                    type=\"number\"\r\n                                    step=\"0.1\"\r\n                                    min=\"0.0\"\r\n                                    className=\"form-control-sm\"\r\n                                    id=\"targetItemOutputs\"\r\n                                    label=\"Target Items per Second\"\r\n                                    value = {this.props.targets.bps}\r\n                                    onChange={(e) => this.props.handleSettingChange(e.target.value, \"item\")}\r\n                                />\r\n                                <MDBInput\r\n                                    type=\"number\"\r\n                                    step=\"1\"\r\n                                    min=\"0.00\"\r\n                                    className=\"form-control-sm\"\r\n                                    id=\"targetMachines\"\r\n                                    label=\"Target Machines\"\r\n                                    value = {this.props.targets.machines}\r\n                                    onChange={(e) => this.props.handleSettingChange(e.target.value, \"machine\")}\r\n                                />\r\n                            </form>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InformationSection;\r\n\r\n","import React, { Component } from 'react';\r\nimport { MDBRow, MDBCol, MDBCard, MDBCardBody } from 'mdbreact';\r\nimport { GenerateSankeyData } from './helpers/RecipeHelpers';\r\nimport Plot from 'react-plotly.js';\r\n\r\nclass SankeySection extends Component {\r\n    render() {\r\n        let sankeyData = GenerateSankeyData(this.props.recipes);\r\n        return (\r\n            <MDBRow>\r\n                <MDBCol>\r\n                    <MDBCard>\r\n                        <MDBCardBody className=\"min-height\">\r\n                            <Plot\r\n                                data={sankeyData.data}\r\n                                layout={{ autosize: true, title: \"Production Chain Visual\" }}\r\n                                config={{ displayModeBar: false, responsive: true }}\r\n                                useResizeHandler={true}\r\n                                className=\"plot\"\r\n                                style={{position:'center'}}\r\n                            />\r\n                        </MDBCardBody>\r\n                    </MDBCard>\r\n                </MDBCol>\r\n            </MDBRow>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SankeySection;","import React, { Component } from 'react';\r\n\r\nclass DisplayRFtTime extends Component {\r\n    render() {\r\n        let overclocked = this.props.overclock;\r\n        let displayRFt = this.props.rft;\r\n        let displayTime = this.props.time;\r\n        let displayEfficiency = this.props.efficiency;\r\n\r\n        if (overclocked === 'true') {\r\n            displayRFt = this.props.rftoc;\r\n            displayTime = this.props.timeoc;\r\n            displayEfficiency = this.props.efficiencyoc;\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <th key={\"rft\" + this.props.step}>{displayRFt}</th>\r\n                <th key={\"time\" + this.props.step}>{Number(displayTime).toFixed(2)}</th>\r\n                <th key={\"efficiency\" + this.props.step}>{Number(displayEfficiency).toFixed(2)}</th>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DisplayRFtTime;","import { MDBBadge } from 'mdbreact';\r\nimport React, { Component } from 'react';\r\nimport * as data from \"./data\";\r\nimport DisplayRFtTime from './DisplayRFtTime';\r\nconst tierNames = data.TierNames;\r\n\r\nclass Recipe extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <tr>\r\n                    <th key={\"step\" + this.props.step}>{this.props.step}</th>\r\n                    <th key={\"machine\" + this.props.step}>{this.props.machine}</th>\r\n                    <th key={\"tier\" + this.props.step}>\r\n                        <select className=\"browser-default custom-select\" value={this.props.tier}\r\n                            onChange={(e) => this.props.onChangeTier(this.props.step, e.target.value)}>\r\n                            {tierNames.map((tier) =>\r\n                                <option key={\"tier\" + tier + this.props.step} value={tier}>{tier}</option>)}\r\n                        </select>\r\n                    </th>\r\n                    <th key={\"overclock\" + this.props.step}>\r\n                        <select className=\"browser-default custom-select\" value={this.props.overclock}\r\n                            onChange={(e) => this.props.onChange(this.props.step, e.target.value)}>\r\n                            <option value=\"true\">True</option>\r\n                            <option value=\"false\">False</option>\r\n                        </select>\r\n                    </th>\r\n\r\n                    <DisplayRFtTime\r\n                        key={\"display\" + this.props.step}\r\n                        rft={this.props.rft}\r\n                        rftoc={this.props.rftoc}\r\n                        time={this.props.time}\r\n                        timeoc={this.props.timeoc}\r\n                        efficiency={this.props.efficiency}\r\n                        efficiencyoc={this.props.efficiencyoc}\r\n                        overclock={this.props.overclock}\r\n                    />\r\n\r\n                    <th key={\"inputs\" + this.props.step}>\r\n                        {\r\n                            this.props.inputs.map((n, index) => {\r\n                                return (\r\n                                    <div key={index}>\r\n                                        <b>{n.quantity + n.unit}</b>\r\n                                        {\" \" + n.name}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </th>\r\n                    <th key={\"outputs\" + this.props.step}>\r\n                        {\r\n                            this.props.outputs.map((o, index) => {\r\n                                return (\r\n                                    <div key={index}>\r\n                                        <b>{o.quantity + o.unit}</b>\r\n                                        {\" \" + o.name}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </th>\r\n                    <th key={\"targetMachines\" + this.props.step}>\r\n                        {Number(this.props.targetMachines).toFixed(2)}\r\n                    </th>\r\n                    <th key={\"targetInputs\" + this.props.step}>\r\n                        {\r\n                            this.props.inputs.map((o, index) => {\r\n                                return (\r\n                                    <div key={index}>\r\n                                        <b>{Number(o.quantity * this.props.targetMachines /\r\n                                            (this.props.overclock === 'true' ? this.props.timeoc : this.props.time)\r\n                                        ).toFixed(2) + o.unit}</b>\r\n                                        {\" \" + o.name}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </th>\r\n                    <th key={\"targetOutputs\" + this.props.step}>\r\n                        {\r\n                            this.props.outputs.map((o, index) => {\r\n                                return (\r\n                                    <div key={index}>\r\n                                        <b>{Number(o.quantity * this.props.targetMachines /\r\n                                            (this.props.overclock === 'true' ? this.props.timeoc : this.props.time)\r\n                                        ).toFixed(2) + o.unit}</b>\r\n                                        {\" \" + o.name}\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </th>\r\n                    <th key={\"modify\" + this.props.step}>\r\n                        <MDBBadge\r\n                            tag=\"a\"\r\n                            color=\"light\"\r\n                            size=\"sm\"\r\n                            className=\"m-sm-1\"\r\n                            onClick={() => this.props.onSwapUp(Number(this.props.step))}\r\n                        >Up</MDBBadge>\r\n                        <MDBBadge\r\n                            tag=\"a\"\r\n                            color=\"light\"\r\n                            size=\"sm\"\r\n                            className=\"m-sm-1\"\r\n                            onClick={() => this.props.onSwapDown(Number(this.props.step))}\r\n                        >Down</MDBBadge>\r\n                        <MDBBadge\r\n                            tag=\"a\"\r\n                            color=\"danger\"\r\n                            size=\"sm\"\r\n                            className=\"m-sm-1\"\r\n                            onClick={() => this.props.onDelete(Number(this.props.step))}\r\n                        >Remove</MDBBadge>\r\n                    </th>\r\n                </tr>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Recipe","import React, { Component } from 'react';\r\nimport { MDBBadge, MDBInput, MDBAlert } from 'mdbreact';\r\nimport * as data from './data';\r\nimport { ParseItems } from './helpers/UIHelpers';\r\nconst tierNames = data.TierNames;\r\n\r\nclass AddRecipe extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            tier: tierNames[0],\r\n            overclock: false,\r\n            errorAlert: \"invisible\",\r\n            errorText: \" \"\r\n        };\r\n    }\r\n\r\n    handleInputChange = inputName => value => {\r\n        const nextValue = value;\r\n        this.setState({\r\n            [inputName]: nextValue,\r\n            errorAlert: \"invisible\"\r\n        });\r\n    }\r\n\r\n    handleSelectChange = (inputName, selectValue) => {\r\n        this.setState({\r\n            [inputName]: selectValue\r\n        });\r\n    }\r\n\r\n    handleDataValidation = () => {\r\n        let isValid = true;\r\n        let rawRecipe = this.state;\r\n        for (const property in rawRecipe) {\r\n            if (rawRecipe[property] === null || rawRecipe[property] === \"\") {\r\n                isValid = false;\r\n            }\r\n        }\r\n        if (isValid && Object.keys(rawRecipe).length === 9) {\r\n            let inputList = [];\r\n            let outputList = [];\r\n            try {\r\n                inputList = ParseItems(rawRecipe.rawInput);\r\n                outputList = ParseItems(rawRecipe.rawOutput);\r\n\r\n                for (let index in inputList) {\r\n                    if (isNaN(inputList[index].quantity)) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n\r\n                for (let index in outputList) {\r\n                    if (isNaN(outputList[index].quantity)) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n\r\n                for (let index in inputList) {\r\n                    if (!(inputList[index].unit.toLowerCase() === \"mb\" || inputList[index].unit.toLowerCase() === \"b\")) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n\r\n                for (let index in outputList) {\r\n                    if (!(outputList[index].unit.toLowerCase() === \"mb\" || outputList[index].unit.toLowerCase() === \"b\")) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n            }\r\n            catch (error) {\r\n                isValid = false;\r\n            }\r\n\r\n            if (isValid) {\r\n                let newRecipe = {\r\n                    machine: rawRecipe.machine,\r\n                    tier: rawRecipe.tier,\r\n                    overclock: rawRecipe.overclock,\r\n                    rft: rawRecipe.rft,\r\n                    time: rawRecipe.time,\r\n                    inputs: [...inputList],\r\n                    outputs: [...outputList]\r\n                }\r\n                this.props.onAdd(newRecipe);\r\n            }\r\n            else {\r\n                this.setState({\r\n                    errorAlert: \"visible\",\r\n                    errorText: \"Invalid: Check item format\"\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({\r\n                errorAlert: \"visible\",\r\n                errorText: \"Invalid: Missing info.\"\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //this builds the options list for tiers\r\n        return (\r\n            <React.Fragment>\r\n                <tr>\r\n                    <th key=\"stepAdd\"></th>\r\n                    <th key=\"machineAdd\">\r\n                        <MDBInput\r\n                            type=\"text\"\r\n                            className=\"form-control-sm\"\r\n                            id=\"machineText\"\r\n                            label=\"Machine\"\r\n                            getValue={this.handleInputChange(\"machine\")}\r\n                        />\r\n                    </th>\r\n                    <th key=\"tierAdd\" className=\"align-middle\">\r\n                        <select\r\n                            className=\"browser-default custom-select\"\r\n                            id=\"tierSelect\"\r\n                            value={this.state.tier}\r\n                            onChange={(e) => this.handleSelectChange(\"tier\", e.target.value)}\r\n                        >\r\n                            {tierNames.map((tier) =>\r\n                                <option key={\"tier:\" + tier} value={tier}>{tier}</option>)}\r\n                        </select>\r\n                    </th>\r\n                    <th key=\"overclockAdd\" className=\"align-middle\">\r\n                        <select\r\n                            className=\"browser-default custom-select\"\r\n                            id=\"overclockSelect\"\r\n                            value={this.state.overclock}\r\n                            onChange={(e) => this.handleSelectChange(\"overclock\", e.target.value)}\r\n                        >\r\n                            <option value=\"false\">False</option>\r\n                            <option value=\"true\">True</option>\r\n                        </select>\r\n                    </th>\r\n                    <th key=\"rftAdd\">\r\n                        <MDBInput\r\n                            type=\"number\"\r\n                            step=\"o.o1\"\r\n                            min=\"0\"\r\n                            className=\"form-control-sm\"\r\n                            id=\"RfTText\"\r\n                            label=\"RF/T\"\r\n                            getValue={this.handleInputChange(\"rft\")}\r\n                        />\r\n                    </th>\r\n                    <th key=\"timeAdd\">\r\n                        <MDBInput\r\n                            type=\"number\"\r\n                            step=\"o.o1\"\r\n                            min=\"0\"\r\n                            className=\"form-control-sm\"\r\n                            id=\"timeText\"\r\n                            label=\"time (s)\"\r\n                            getValue={this.handleInputChange(\"time\")}\r\n                        />\r\n                    </th>\r\n                    <th></th>\r\n                    <th key=\"inputItemAdd\">\r\n                        <MDBInput\r\n                            type=\"text\"\r\n                            className=\"form-control-sm\"\r\n                            id=\"inputItemsText\"\r\n                            label=\"Input\"\r\n                            getValue={this.handleInputChange(\"rawInput\")}\r\n                        />\r\n                    </th>\r\n                    <th key=\"outputItemAdd\">\r\n                        <MDBInput\r\n                            type=\"text\"\r\n                            className=\"form-control-sm\"\r\n                            id=\"outputItemsText\"\r\n                            label=\"Output\"\r\n                            getValue={this.handleInputChange(\"rawOutput\")}\r\n                        />\r\n                    </th>\r\n                    <th></th>\r\n                    <th key=\"errorAdd\" className=\"align-middle\">\r\n                        <MDBAlert\r\n                            color=\"danger\"\r\n                            className={this.state.errorAlert}\r\n                            id=\"errorAlert\"\r\n                        >\r\n                            {this.state.errorText}\r\n                        </MDBAlert>\r\n                    </th>\r\n                    <th></th>\r\n                    <th key=\"modifyAdd\" className=\"align-middle\">\r\n                        <MDBBadge\r\n                            tag=\"a\"\r\n                            color=\"light\"\r\n                            size=\"sm\"\r\n                            className=\"m-sm-1\"\r\n                            onClick={() => this.handleDataValidation()}\r\n                        >Add</MDBBadge>\r\n                    </th>\r\n                </tr>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddRecipe\r\n","import React, { Component } from 'react';\r\nimport { MDBCard, MDBCardBody, MDBTable, MDBTableBody, MDBTableHead, MDBRow, MDBCol } from 'mdbreact';\r\nimport Recipe from './Recipe';\r\nimport AddRecipe from './AddRecipe';\r\n\r\nclass TableSection extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <MDBRow>\r\n                    <MDBCol>\r\n                        <MDBCard>\r\n                            <MDBCardBody>\r\n                                <MDBTable autoWidth responsive hover striped>\r\n                                    <MDBTableHead color=\"blue lighten-4\">\r\n                                        <tr>\r\n                                            {\r\n                                                (this.props.headers.map((header, index) => (\r\n                                                    <th key={\"header\" + index} className=\"align-middle text-uppercase font-weight-bold\">{header}</th>\r\n                                                )))\r\n                                            }\r\n                                        </tr>\r\n                                    </MDBTableHead>\r\n                                    <MDBTableBody>\r\n                                        {\r\n                                            this.props.recipes.map(recipe => (\r\n                                                <Recipe\r\n                                                    key={recipe.step}\r\n                                                    step={recipe.step}\r\n                                                    machine={recipe.machine}\r\n                                                    tier={recipe.tier}\r\n                                                    overclock={recipe.overclock}\r\n                                                    rft={recipe.rft}\r\n                                                    rftoc={recipe.rftoc}\r\n                                                    time={recipe.time}\r\n                                                    timeoc={recipe.timeoc}\r\n                                                    efficiency={recipe.efficiency}\r\n                                                    efficiencyoc={recipe.efficiencyoc}\r\n                                                    inputs={recipe.inputs}\r\n                                                    outputs={recipe.outputs}\r\n                                                    targetMachines={recipe.targetMachines}\r\n                                                    onDelete={this.props.handleDelete}\r\n                                                    onChangeTier={this.props.handleTiers}\r\n                                                    onChange={this.props.handleOverclock}\r\n                                                    onSwapUp={this.props.handleSwapUp}\r\n                                                    onSwapDown={this.props.handleSwapDown}\r\n                                                />\r\n                                            ))\r\n                                        }\r\n                                        {\r\n                                            //adds a line for adding a recipe\r\n                                            <AddRecipe\r\n                                                onAdd={this.props.handleAdd}\r\n                                            />\r\n                                        }\r\n                                    </MDBTableBody>\r\n                                </MDBTable>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TableSection;","import React, { Component } from 'react';\r\nimport data from './sections/data';\r\nimport exampleRecipes from './sections/example';\r\nimport { Overclock, GenerateRecipeGraph } from './sections/helpers/RecipeHelpers';\r\nimport { BuildOptions, CalculateRatio, OutputRecipes } from './sections/helpers/UIHelpers';\r\nimport InformationSection from './sections/InformationSection';\r\nimport SankeySection from './sections/SankeySection';\r\nimport TableSection from './sections/TableSection';\r\n\r\nclass DashboardPage extends Component {\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            headers: data.Headers.map(headers => {\r\n                return (headers.label)\r\n            }),\r\n            recipes: CalculateRatio(exampleRecipes.Recipes),\r\n            targets: {\r\n                \"item\": {\r\n                    step: null,\r\n                    name: \"\",\r\n                    ratio: 0\r\n                },\r\n                \"machines\": 0,\r\n                \"bps\": 0\r\n            }\r\n        }\r\n    }\r\n\r\n    handleDelete = recipeStep => {\r\n        const state = this.state;\r\n        state.recipes = state.recipes.filter(r => Number(r.step) !== recipeStep);\r\n\r\n        for (let index in state.recipes) {\r\n            state.recipes[index].step = index;\r\n            state.recipes[index].outputs.map(output => (\r\n                output.step = index\r\n            ))\r\n        }\r\n\r\n        if (recipeStep === state.targets.item.step) {\r\n            state.targets.item.step = null;\r\n            state.targets.item.name = \"\";\r\n            state.targets.item.ratio = 0;\r\n            state.targets.bps = 0;\r\n            state.targets.machines = 0;\r\n        }\r\n\r\n        this.setState(state);\r\n    };\r\n\r\n    handleOverclock = (recipeId, status) => {\r\n        let recipes = this.state.recipes;\r\n        recipes[recipeId].overclock = status;\r\n\r\n        let results = Overclock(recipes[recipeId].rft / 4, recipes[recipeId].tier, recipes[recipeId].time * 20);\r\n        recipes[recipeId].rftoc = results.eut * 4;\r\n        recipes[recipeId].timeoc = results.ticks / 20;\r\n        recipes[recipeId].efficiencyoc =\r\n            100 * (recipes[recipeId].rft * recipes[recipeId].time) /\r\n            (recipes[recipeId].rftoc * recipes[recipeId].timeoc);\r\n\r\n        let graph = GenerateRecipeGraph(recipes, this.state.targets);\r\n        recipes = OutputRecipes(graph, recipes);\r\n\r\n        this.setState({ recipes });\r\n    };\r\n\r\n    handleTiers = (recipeId, status) => {\r\n        let recipes = this.state.recipes;\r\n        recipes[recipeId].tier = status;\r\n\r\n        let results = Overclock(recipes[recipeId].rft / 4, recipes[recipeId].tier, recipes[recipeId].time * 20);\r\n        recipes[recipeId].rftoc = results.eut * 4;\r\n        recipes[recipeId].timeoc = results.ticks / 20;\r\n        recipes[recipeId].efficiencyoc =\r\n            100 * (recipes[recipeId].rft * recipes[recipeId].time) /\r\n            (recipes[recipeId].rftoc * recipes[recipeId].timeoc);\r\n\r\n        let graph = GenerateRecipeGraph(recipes, this.state.targets);\r\n        recipes = OutputRecipes(graph, recipes);\r\n\r\n        this.setState({ recipes })\r\n    };\r\n\r\n    handleSwapDown = recipeStep => {\r\n        if (recipeStep < this.state.recipes.length - 1) {\r\n            let recipes = this.state.recipes;\r\n            let currentItem = recipes[recipeStep];\r\n            let nextItem = recipes[recipeStep + 1];\r\n\r\n            currentItem.step = recipeStep + 1;\r\n            currentItem.outputs.map(output => (\r\n                output.step = recipeStep + 1\r\n            ));\r\n\r\n            nextItem.step = recipeStep;\r\n            nextItem.outputs.map(output => (\r\n                output.step = recipeStep\r\n            ));\r\n\r\n            recipes[recipeStep] = nextItem;\r\n            recipes[recipeStep + 1] = currentItem;\r\n\r\n            this.setState({ recipes });\r\n        }\r\n    };\r\n\r\n    handleSwapUp = recipeStep => {\r\n        if (recipeStep > 0) {\r\n            let recipes = this.state.recipes;\r\n            let currentItem = recipes[recipeStep];\r\n            let nextItem = recipes[recipeStep - 1];\r\n\r\n            currentItem.step = recipeStep - 1;\r\n            currentItem.outputs.map(output => (\r\n                output.step = recipeStep - 1\r\n            ));\r\n\r\n            nextItem.step = recipeStep;\r\n            nextItem.step = recipeStep;\r\n            nextItem.outputs.map(output => (\r\n                output.step = recipeStep\r\n            ));\r\n\r\n            recipes[recipeStep] = nextItem;\r\n            recipes[recipeStep - 1] = currentItem;\r\n\r\n            this.setState({ recipes });\r\n        }\r\n    };\r\n\r\n    handleAdd = newRecipe => {\r\n        let recipes = this.state.recipes;\r\n        let nextStep = this.state.recipes.length;\r\n\r\n        recipes.push(\r\n            {\r\n                step: nextStep,\r\n                machine: newRecipe.machine,\r\n                tier: newRecipe.tier,\r\n                overclock: newRecipe.overclock,\r\n                rft: newRecipe.rft,\r\n                time: newRecipe.time,\r\n                efficiency: 100,\r\n                inputs: [...newRecipe.inputs],\r\n                outputs: [...newRecipe.outputs]\r\n            }\r\n        );\r\n\r\n        recipes = CalculateRatio(recipes);\r\n\r\n        this.setState({ recipes });\r\n    };\r\n\r\n    handleSettingChange = (update, type = \"name\") => {\r\n        let targets = this.state.targets;\r\n        if (targets.item.name === \"\") {\r\n            if (type === \"name\") {\r\n                targets.item.name = update;\r\n                targets.item.ratio = update.ratio;\r\n                targets.item.step = update.step;\r\n                targets.machines = 1;\r\n                targets.bps = 1 * targets.item.ratio;\r\n            }\r\n        }\r\n        else if (type === \"name\") {\r\n            targets.item.name = update;\r\n            targets.item.ratio = update.ratio;\r\n            targets.item.step = update.step;\r\n            targets.machines = 1;\r\n            targets.bps = targets.machines * targets.item.ratio;\r\n        }\r\n        else if (type === \"machine\") {\r\n            if (update <= 0) {\r\n                targets.machines = 0;\r\n                targets.bps = 0;\r\n            }\r\n            else {\r\n                targets.machines = update;\r\n                targets.bps = targets.machines * targets.item.ratio;\r\n            }\r\n        }\r\n        else {\r\n            if (update <= 0) {\r\n                targets.bps = 0;\r\n                targets.machines = 0;\r\n            }\r\n            else {\r\n                targets.bps = update;\r\n                targets.machines = update / targets.item.ratio;\r\n            }\r\n        }\r\n\r\n        this.setState({ targets });\r\n        let recipes = this.state.recipes;\r\n        recipes[targets.item.step].targetMachines = targets.machines;\r\n        let graph = GenerateRecipeGraph(this.state.recipes, this.state.targets);\r\n        recipes = OutputRecipes(graph, this.state.recipes)\r\n        this.setState({ recipes });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <InformationSection\r\n                    outputs={BuildOptions(this.state.recipes)}\r\n                    targets={this.state.targets}\r\n                    handleSettingChange={this.handleSettingChange}\r\n                />\r\n                <TableSection\r\n                    headers={this.state.headers}\r\n                    recipes={this.state.recipes}\r\n                    handleDelete={this.handleDelete}\r\n                    handleTiers={this.handleTiers}\r\n                    handleOverclock={this.handleOverclock}\r\n                    handleSwapDown={this.handleSwapDown}\r\n                    handleSwapUp={this.handleSwapUp}\r\n                    handleAdd={this.handleAdd}\r\n                    handleMachineSetting={this.handleMachineSetting}\r\n                />\r\n                <SankeySection recipes={this.state.recipes} targets={this.state.targets} />\r\n            </React.Fragment>\r\n        )\r\n    } changes\r\n}\r\n\r\nexport default DashboardPage;","import React from 'react'\nimport { MDBCol, MDBRow } from 'mdbreact';\n\n\nconst NotFoundPage = () => {\n    return (\n        <React.Fragment>\n            <div className=\"full\">\n                <MDBRow className=\"bad-gateway-row\">\n                    <MDBCol md=\"8\">\n                        <h2 className=\"h2-responsive mt-3 mb-2\">404. That's an error.</h2>\n                        <h4>The requested URL was not found on this server.</h4>\n                    </MDBCol>\n                    <MDBCol md=\"4\">\n                        <img alt=\"Error 404\" className=\"img-fluid\" src=\"https://mdbootstrap.com/img/Others/grafika404-bf.png\" />\n                    </MDBCol>\n                </MDBRow>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default NotFoundPage;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport DashboardPage from './pages/DashboardPage';\nimport NotFoundPage from './pages/NotFoundPage';\n\nclass Routes extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route path='/' exact component={DashboardPage} />\n        <Route path='/dashboard' component={DashboardPage} />\n        <Route path='/404' component={NotFoundPage} />\n      </Switch>\n    );\n  }\n}\n\nexport default Routes;\n","import React, { Component } from 'react';\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink, MDBIcon } from 'mdbreact';\n\nclass TopNavigation extends Component {\n    state = {\n        collapse: false\n    }\n\n    onClick = () => {\n        this.setState({\n            collapse: !this.state.collapse,\n        });\n    }\n\n    toggle = () => {\n        this.setState({\n            dropdownOpen: !this.state.dropdownOpen\n        });\n    }\n\n    render() {\n        return (\n            <MDBNavbar className=\"flexible-navbar\" light expand=\"md\" scrolling>\n                <MDBNavbarBrand href=\"/\">\n                    <strong>ProductionChain</strong>\n                </MDBNavbarBrand>\n                <MDBNavbarToggler onClick = { this.onClick } />\n                <MDBCollapse isOpen = { this.state.collapse } navbar>\n                    <MDBNavbarNav left>\n                        <MDBNavItem active>\n                            <MDBNavLink to=\"#\">Home</MDBNavLink>\n                        </MDBNavItem>\n                    </MDBNavbarNav>\n                    <MDBNavbarNav right>\n                        <MDBNavItem>\n                            <a className=\"border border-light rounded mr-1 nav-link Ripple-parent\" rel=\"noopener noreferrer\" href=\"https://github.com/SimonNguyen/ProductionChain\" target=\"_blank\"><MDBIcon fab icon=\"github\" className=\"mr-2\"/>PC GitHub</a>\n                        </MDBNavItem>\n                    </MDBNavbarNav>\n                </MDBCollapse>\n            </MDBNavbar>\n        );\n    }\n}\n\nexport default TopNavigation;","import React from 'react';\nimport { MDBFooter, MDBIcon } from 'mdbreact';\n\nconst Footer = () => {\n    return (\n        <MDBFooter color=\"blue\" className=\"text-center font-small darken-2\">\n            <div className=\"pb-4\">\n                <MDBIcon fab icon=\"github\" className=\"mr-3\"/>\n            </div>\n            <p className=\"footer-copyright mb-0 py-3 text-center\">\n                &copy; {new Date().getFullYear()} Copyright: <a href=\"/#\"> ProductionChain </a>\n            </p>\n        </MDBFooter>\n    );\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport Routes from '../src/components/Routes';\nimport TopNavigation from './components/topNavigation';\nimport Footer from './components/Footer';\nimport './index.css';\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className=\"flexible-content\">\n                <TopNavigation />\n                <main id=\"content\" className=\"p-5\">\n                    <Routes />\n                </main>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}